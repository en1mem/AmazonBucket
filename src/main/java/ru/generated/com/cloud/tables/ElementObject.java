/*
 * This file is generated by jOOQ.
*/
package ru.generated.com.cloud.tables;


import ru.generated.com.cloud.Com;
import ru.generated.com.cloud.Indexes;
import ru.generated.com.cloud.Keys;
import ru.generated.com.cloud.tables.records.ElementObjectRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementObject extends TableImpl<ElementObjectRecord> {

    private static final long serialVersionUID = -636883891;

    /**
     * The reference instance of <code>com.element_object</code>
     */
    public static final ElementObject ELEMENT_OBJECT = new ElementObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementObjectRecord> getRecordType() {
        return ElementObjectRecord.class;
    }

    /**
     * The column <code>com.element_object.id</code>.
     */
    public final TableField<ElementObjectRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('com.seq_element_object_id'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>com.element_object.entity_id</code>.
     */
    public final TableField<ElementObjectRecord, Long> ENTITY_ID = createField("entity_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>com.element_object.is_actual</code>.
     */
    public final TableField<ElementObjectRecord, Boolean> IS_ACTUAL = createField("is_actual", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>com.element_object.status</code>.
     */
    public final TableField<ElementObjectRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>com.element_object.last_update_date_time</code>.
     */
    public final TableField<ElementObjectRecord, Timestamp> LAST_UPDATE_DATE_TIME = createField("last_update_date_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>com.element_object.business_field</code>.
     */
    public final TableField<ElementObjectRecord, String> BUSINESS_FIELD = createField("business_field", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>com.element_object</code> table reference
     */
    public ElementObject() {
        this(DSL.name("element_object"), null);
    }

    /**
     * Create an aliased <code>com.element_object</code> table reference
     */
    public ElementObject(String alias) {
        this(DSL.name(alias), ELEMENT_OBJECT);
    }

    /**
     * Create an aliased <code>com.element_object</code> table reference
     */
    public ElementObject(Name alias) {
        this(alias, ELEMENT_OBJECT);
    }

    private ElementObject(Name alias, Table<ElementObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementObject(Name alias, Table<ElementObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Com.COM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ELEMENT_OBJECT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ElementObjectRecord, Long> getIdentity() {
        return Keys.IDENTITY_ELEMENT_OBJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ElementObjectRecord> getPrimaryKey() {
        return Keys.ELEMENT_OBJECT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ElementObjectRecord>> getKeys() {
        return Arrays.<UniqueKey<ElementObjectRecord>>asList(Keys.ELEMENT_OBJECT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementObject as(String alias) {
        return new ElementObject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementObject as(Name alias) {
        return new ElementObject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementObject rename(String name) {
        return new ElementObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementObject rename(Name name) {
        return new ElementObject(name, null);
    }
}
