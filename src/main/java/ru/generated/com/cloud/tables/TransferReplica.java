/*
 * This file is generated by jOOQ.
*/
package ru.generated.com.cloud.tables;


import ru.generated.com.cloud.Com;
import ru.generated.com.cloud.Indexes;
import ru.generated.com.cloud.Keys;
import ru.generated.com.cloud.tables.records.TransferReplicaRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferReplica extends TableImpl<TransferReplicaRecord> {

    private static final long serialVersionUID = -669035925;

    /**
     * The reference instance of <code>com.transfer_replica</code>
     */
    public static final TransferReplica TRANSFER_REPLICA = new TransferReplica();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferReplicaRecord> getRecordType() {
        return TransferReplicaRecord.class;
    }

    /**
     * The column <code>com.transfer_replica.id</code>.
     */
    public final TableField<TransferReplicaRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('com.seq_transfer_replica_id'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>com.transfer_replica.element_id</code>.
     */
    public final TableField<TransferReplicaRecord, Long> ELEMENT_ID = createField("element_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>com.transfer_replica.transfer_status</code>.
     */
    public final TableField<TransferReplicaRecord, String> TRANSFER_STATUS = createField("transfer_status", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>com.transfer_replica.start_date_time</code>.
     */
    public final TableField<TransferReplicaRecord, Timestamp> START_DATE_TIME = createField("start_date_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>com.transfer_replica.end_date_time</code>.
     */
    public final TableField<TransferReplicaRecord, Timestamp> END_DATE_TIME = createField("end_date_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>com.transfer_replica</code> table reference
     */
    public TransferReplica() {
        this(DSL.name("transfer_replica"), null);
    }

    /**
     * Create an aliased <code>com.transfer_replica</code> table reference
     */
    public TransferReplica(String alias) {
        this(DSL.name(alias), TRANSFER_REPLICA);
    }

    /**
     * Create an aliased <code>com.transfer_replica</code> table reference
     */
    public TransferReplica(Name alias) {
        this(alias, TRANSFER_REPLICA);
    }

    private TransferReplica(Name alias, Table<TransferReplicaRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransferReplica(Name alias, Table<TransferReplicaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Com.COM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSFER_REPLICA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransferReplicaRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSFER_REPLICA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransferReplicaRecord> getPrimaryKey() {
        return Keys.TRANSFER_REPLICA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransferReplicaRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferReplicaRecord>>asList(Keys.TRANSFER_REPLICA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransferReplica as(String alias) {
        return new TransferReplica(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransferReplica as(Name alias) {
        return new TransferReplica(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferReplica rename(String name) {
        return new TransferReplica(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferReplica rename(Name name) {
        return new TransferReplica(name, null);
    }
}
